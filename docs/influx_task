import "math"
import "date"
import "join"

// 取昨天 0-8 平均值 - 当天 0-8 平均值
// 然后 当天 - 昨天 = 所用电费
option task = {name: "每日用电结算", cron: "00 08 * * *"}

bucket =
    from(bucket: "hniu")
        |> range(start: -2d, stop: now())
        |> filter(fn: (r) => r["_measurement"] == "room")
        |> filter(fn: (r) => r["_field"] == "money")
        |> filter(fn: (r) => r["_value"] >= 0)
        |> filter(fn: (r) => r["room_id"] !~ /^[a-zA-Z*]/)
        |> hourSelection(start: 0, stop: 8)

yesterday = date.truncate(t: -1d, unit: 1d)

yester_bucket =
    bucket
        |> filter(fn: (r) => date.truncate(t: r._time, unit: 1d) == yesterday)
        |> median(column: "_value")
        |> map(fn: (r) => ({r with "_time": string(v: yesterday)}))

today = date.truncate(t: now(), unit: 1d)

today_bucket =
    bucket
        |> filter(fn: (r) => date.truncate(t: r._time, unit: 1d) == today)
        |> median(column: "_value")
        |> map(fn: (r) => ({r with "_time": string(v: today)}))

join.inner(
    left: yester_bucket,
    right: today_bucket,
    on: (l, r) => l.room_id == r.room_id,
    as: (l, r) => ({l with to_day_value: r._value}),
)
    |> fill(column: "to_day_value", value: 0.0)
    |> filter(fn: (r) => r["to_day_value"] != 0)
    |> reduce(
        fn: (r, accumulator) => ({_value: r._value - r.to_day_value}),
        identity: {_value: 0.0},
    )
    |> filter(fn: (r) => r["_value"] >= 0)
    |> set(key: "_measurement", value: "daily")
    |> set(key: "_time", value: "daily")
    |> map(fn: (r) => ({r with "_time": today}))
    |> to(bucket: "hniu", org: "MochiParty")
